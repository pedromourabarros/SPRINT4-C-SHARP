// <auto-generated />
using System;
using BetGuardianAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BetGuardianAPI.Migrations
{
    [DbContext(typeof(BetGuardianContext))]
    partial class BetGuardianContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("BetGuardianAPI.Models.Alerta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataCriacao");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("BetGuardianAPI.Models.AtividadeAlternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("NivelDificuldade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoEstimadoMinutos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Categoria");

                    b.ToTable("AtividadesAlternativas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Bem-estar",
                            Descricao = "Pratique meditação por 10-15 minutos para reduzir o estresse e ansiedade",
                            NivelDificuldade = 2,
                            Nome = "Meditação",
                            TempoEstimadoMinutos = 15
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Fitness",
                            Descricao = "Faça uma caminhada, corrida ou exercícios em casa para liberar endorfinas",
                            NivelDificuldade = 3,
                            Nome = "Exercícios Físicos",
                            TempoEstimadoMinutos = 30
                        },
                        new
                        {
                            Id = 3,
                            Categoria = "Educação",
                            Descricao = "Leia um livro interessante para distrair a mente e expandir conhecimentos",
                            NivelDificuldade = 1,
                            Nome = "Leitura",
                            TempoEstimadoMinutos = 45
                        },
                        new
                        {
                            Id = 4,
                            Categoria = "Arte",
                            Descricao = "Pratique desenho, pintura, música ou qualquer atividade criativa",
                            NivelDificuldade = 2,
                            Nome = "Hobby Criativo",
                            TempoEstimadoMinutos = 60
                        },
                        new
                        {
                            Id = 5,
                            Categoria = "Social",
                            Descricao = "Jogue xadrez, damas ou outros jogos de estratégia com amigos ou família",
                            NivelDificuldade = 2,
                            Nome = "Jogos de Tabuleiro",
                            TempoEstimadoMinutos = 90
                        },
                        new
                        {
                            Id = 6,
                            Categoria = "Culinária",
                            Descricao = "Experimente uma nova receita ou prepare uma refeição especial",
                            NivelDificuldade = 3,
                            Nome = "Cozinhar",
                            TempoEstimadoMinutos = 60
                        },
                        new
                        {
                            Id = 7,
                            Categoria = "Natureza",
                            Descricao = "Cuide de plantas, plante sementes ou organize um jardim",
                            NivelDificuldade = 2,
                            Nome = "Jardinagem",
                            TempoEstimadoMinutos = 45
                        },
                        new
                        {
                            Id = 8,
                            Categoria = "Social",
                            Descricao = "Participe de atividades voluntárias na comunidade",
                            NivelDificuldade = 4,
                            Nome = "Voluntariado",
                            TempoEstimadoMinutos = 120
                        });
                });

            modelBuilder.Entity("BetGuardianAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("Idade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelRisco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalApostas")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorGasto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NivelRisco");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("BetGuardianAPI.Models.Alerta", b =>
                {
                    b.HasOne("BetGuardianAPI.Models.Usuario", "Usuario")
                        .WithMany("Alertas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BetGuardianAPI.Models.Usuario", b =>
                {
                    b.Navigation("Alertas");
                });
#pragma warning restore 612, 618
        }
    }
}
